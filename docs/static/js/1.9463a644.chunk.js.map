{"version":3,"sources":["controller/scroll.ts","views/MarbleLoading.tsx","views/Scroll.tsx","site/pages/scroll/index.js","../node_modules/_@babel_runtime@7.8.7@@babel/runtime/helpers/esm/createClass.js","controller/event.ts","controller/move.ts"],"names":["DistanceStatus","ScrollControl","direction","Refresh_Distance","distanceStatus","isRefreshable","beginTime","matLimit","x","y","this","_markBeginTime","distance","Date","now","speed","getMoveDist","_getTimeTotal","EMPTY","tip","dist","DONE","HALF","MoveControl","MarbleLoading","className","Scroll","props","freshBoxClassName","refScrollWarp","refScrollBody","eventControl","scrollControl","freshStore","Begin_Distance","End_Distance","oldDistance","scrollBottleneck","hideScrollTip","setState","transform","time","updateScroll","freshHandler","scrollTip","setTimeout","loadAnm","state","isLoading","getScrollBottleneck","offsetHeight","scrollMat","expectMat","getExpectMat","finalPonit","onStartHandler","event","start","isRefreshAble","setRefreshAble","onMoveHandler","preventDefault","distanceY","move","markScrollTip","finalDistance","newDistance","onEndHandler","end","status","getUpdateStatus","resetRefreshStatus","loadHandler","EventControl","createEventList","listenerAllOfEle","removeAllOfEle","ref","ele","style","transition","children","React","PureComponent","TestContent","Array","num","fill","map","val","idx","key","TestReFresh","useState","setNum","console","log","_defineProperties","target","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_createClass","Constructor","protoProps","staticProps","prototype","eventList","willPreventDefault","willNotPreventDefault","$ele","isPassiveSupported","passiveSupported","passive","capture","window","touchstart","touchmove","touchend","mousedown","mousemove","mouseup","keys","forEach","pd","indexOf","addEventListener","removeEventListener","zeroPoint","JSON","stringify","startPoint","endPoint","Prevent_Distance","lockDirection","isAnm","parse","Error","absX","Math","abs","absY","point","getEventPoint","pageX","pageY","_resetSomething","assign","_getLockDirection","_getFinalEndPonit"],"mappings":"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","file":"static/js/1.9463a644.chunk.js","sourcesContent":["import MoveControl from './move';\r\n\r\ntype Point = {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\nenum DistanceStatus { 'EMPTY', 'HALF', 'DONE' }\r\n\r\ntype Status = 'update' | 'reset' | 'none';\r\n\r\nclass ScrollControl extends MoveControl {\r\n    \r\n    Refresh_Distance: number;\r\n    distanceStatus?: DistanceStatus;\r\n    isRefreshable: boolean;\r\n    beginTime?: number;\r\n    matLimit: number;\r\n\r\n    constructor() {\r\n        super({direction: 'y'});\r\n        this.Refresh_Distance = 90;\r\n        this.isRefreshable = true;\r\n        this.matLimit = 0.7;\r\n    }\r\n\r\n    _getFinalEndPonit(): Point {\r\n        return {\r\n            x: 0,\r\n            y: 0\r\n        };\r\n    }\r\n\r\n    _resetSomething() {\r\n        this._markBeginTime();\r\n        this.distance[this.direction] = 0;\r\n    }\r\n\r\n    _markBeginTime() {\r\n        this.beginTime = Date.now();\r\n    }\r\n\r\n    _getTimeTotal(): number {\r\n        const endTime = Date.now();\r\n        const moveTime = endTime - this.beginTime!;\r\n        return moveTime;\r\n    }\r\n\r\n    getExpectMat(): number {\r\n        const distanceTotal = this.getMoveDist();\r\n        const moveTime = this._getTimeTotal();\r\n        // 速度 = 路程 / 时间\r\n        const speed = distanceTotal / moveTime;\r\n        if (speed < this.matLimit && speed > -this.matLimit) {\r\n            return 0\r\n        }\r\n        // 计算期望缓冲距离\r\n        const mat = speed * 456;\r\n        return mat;\r\n    }\r\n\r\n    setRefreshAble(isRefreshable: boolean) {\r\n        this.isRefreshable = isRefreshable;\r\n    }\r\n\r\n    resetRefreshStatus() {\r\n        this.distanceStatus = DistanceStatus.EMPTY;\r\n    }\r\n\r\n    markScrollTip(): string {\r\n        let tip = '';\r\n        const dist = this.getMoveDist();\r\n        if (dist > this.Refresh_Distance) {\r\n            this.distanceStatus = DistanceStatus.DONE;\r\n            tip = '松开刷新';\r\n        } else if (dist > 0){\r\n            this.distanceStatus = DistanceStatus.HALF;\r\n            tip = '下拉刷新';\r\n        }\r\n        return tip;\r\n    }\r\n\r\n    getUpdateStatus(): Status {\r\n        if (this.distanceStatus === DistanceStatus.DONE) {\r\n            return 'update';\r\n        }\r\n        if (this.distanceStatus === DistanceStatus.HALF) {\r\n            return 'reset';\r\n        }\r\n        return 'none';\r\n    }\r\n\r\n}\r\n\r\nexport default ScrollControl;","import React from 'react';\r\n\r\ninterface MarbleLoadingProps {\r\n    className?: string\r\n}\r\n\r\n// 弹珠式Loading\r\nexport default function MarbleLoading({className = ''}: MarbleLoadingProps) {\r\n    return <div\r\n        className={`zui-marble-loading ${className}`}>\r\n        <div className=\"zui-marble\"></div>\r\n        <div className=\"zui-marble\"></div>\r\n        <div className=\"zui-marble\"></div>\r\n    </div>\r\n}","import React from 'react';\r\nimport EventControl from '../controller/event';\r\nimport ScrollControl from '../controller/scroll';\r\nimport MarbleLoading from './MarbleLoading';\r\n\r\ninterface ReScrollProps {\r\n  className?: String, // 刷新组件的 支持添加className\r\n  freshDistance?: number, // 触发刷新需要的：下拉距离\r\n  loadDistance?: number, // 触发加载需要的：距离最底部距离\r\n  freshHandler: Function | undefined, // 刷新执行的函数\r\n  loadHandler: Function | undefined // 加载执行的函数\r\n  children?: React.ReactNode\r\n}\r\n\r\ntype UseEvent = React.TouchEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement>;\r\n\r\nexport default  class Scroll extends React.PureComponent<ReScrollProps, any> {\r\n  freshBoxClassName: string;\r\n  refScrollWarp?: HTMLDivElement | null;\r\n  refScrollBody?: HTMLDivElement | null;\r\n  eventControl?: EventControl;\r\n  scrollControl: ScrollControl;\r\n  freshStore: {[key: string]: Function};\r\n  Begin_Distance: number;\r\n  End_Distance: number;\r\n  oldDistance: number;\r\n  scrollBottleneck: number;\r\n  // scrolling: boolean;\r\n\r\n  constructor(props: ReScrollProps) {\r\n    super(props);\r\n    this.freshBoxClassName = `zui-scroll-box ${props.className || ''}`;\r\n    this.Begin_Distance = -50;\r\n    this.End_Distance = 26;\r\n    this.scrollControl = new ScrollControl(); // 滚动控制器只返回距离和状态，不操作dom\r\n    this.freshStore = {\r\n      'update': this.updateScroll,\r\n      'reset': this.hideScrollTip,\r\n      'none': () => {}\r\n    }\r\n    this.oldDistance = 0;\r\n    this.scrollBottleneck = 0;\r\n    // this.scrolling = false\r\n    // state\r\n    this.state = {\r\n      transform: {\r\n        distance: this.Begin_Distance,\r\n        time: 0\r\n      },\r\n      scrollTip: '',\r\n      isLoading: false\r\n    }\r\n  }\r\n\r\n  hideScrollTip = (): void => {\r\n    this.setState({\r\n      transform: {\r\n        distance: this.Begin_Distance,\r\n        time: 0.5\r\n      }\r\n    })\r\n  }\r\n\r\n  updateScroll = () => {\r\n    this.props.freshHandler!();\r\n    // this.scrolling = true;\r\n    this.setState({\r\n      scrollTip: '刷新完成>>>',\r\n      transform: {\r\n        distance: 0,\r\n        time: 2\r\n      }\r\n    })\r\n    setTimeout(() => {\r\n      this.hideScrollTip()\r\n    }, 300);\r\n  }\r\n\r\n  loadAnm = () => {\r\n    if (!this.state.isLoading) {\r\n      this.setState({\r\n        isLoading: true,\r\n      })\r\n      setTimeout(() => {\r\n        this.setState({\r\n          isLoading: false,\r\n        })\r\n      }, 500)\r\n    }\r\n  }\r\n\r\n  // 可滚动距离\r\n  getScrollBottleneck = () => {\r\n    const body = this.refScrollBody!.offsetHeight;\r\n    const box = this.refScrollWarp!.offsetHeight;\r\n    return  body - box + this.Begin_Distance;\r\n  }\r\n\r\n  //  滚动缓冲\r\n  scrollMat = () => {\r\n    const expectMat = this.scrollControl.getExpectMat();\r\n    if (expectMat) {\r\n      // this.scrolling = true;\r\n      let finalPonit = this.state.transform.distance + expectMat;\r\n      if (finalPonit > this.Begin_Distance) {\r\n        // 不能低于起点\r\n        finalPonit = this.Begin_Distance\r\n      } else if (finalPonit < -this.scrollBottleneck) {\r\n        // 不能超过终点\r\n        finalPonit = -this.scrollBottleneck;\r\n      }\r\n      this.setState({\r\n        transform: {\r\n          distance: finalPonit,\r\n          time: 0.5\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  onStartHandler = (event: UseEvent): void => {\r\n    this.setState({\r\n      transform: {\r\n        distance: this.state.transform.distance,\r\n        time: 0\r\n      }\r\n    })\r\n    this.scrollControl.start(event);\r\n    const isRefreshAble = this.state.transform.distance === this.Begin_Distance;\r\n    this.scrollControl.setRefreshAble(isRefreshAble);\r\n    \r\n    this.oldDistance = this.state.transform.distance;\r\n    this.scrollBottleneck = this.getScrollBottleneck();\r\n  }\r\n\r\n  onMoveHandler = (event: UseEvent) => {\r\n    event.preventDefault();\r\n    const point = this.scrollControl.move(event);\r\n    const distanceY = point.y;\r\n    // 下拉动画\r\n    if (distanceY > 0 && this.scrollControl.isRefreshable) {\r\n      const scrollTip = this.scrollControl.markScrollTip();\r\n      this.setState({ scrollTip })\r\n    }\r\n    const newDistance = this.oldDistance + distanceY;\r\n    let finalDistance;\r\n    if (!this.scrollControl.isRefreshable &&\r\n        newDistance > this.Begin_Distance) { // 顶点\r\n      finalDistance = this.Begin_Distance;\r\n    } else if (this.scrollBottleneck <= (-newDistance)) { // 终点\r\n      finalDistance = -this.scrollBottleneck - this.End_Distance;\r\n    } else {\r\n      if (distanceY > 0) { // 下拉刷新移动一半\r\n        finalDistance = this.oldDistance + distanceY/2;\r\n      } else {\r\n        finalDistance = newDistance;\r\n      }\r\n    }\r\n    this.setState({\r\n      transform: {\r\n        distance: finalDistance,\r\n        time: 0\r\n      }\r\n    })\r\n  }\r\n\r\n  onEndHandler = (): void => {\r\n    this.scrollControl.end();\r\n    // 需要刷新的时候执行 传入的刷新方法\r\n    if (typeof this.props.freshHandler === 'function') {\r\n      const status = this.scrollControl.getUpdateStatus();\r\n      if (status !== 'none') {\r\n        this.freshStore[status]();\r\n        this.scrollControl.resetRefreshStatus();\r\n        return;\r\n      };\r\n    }\r\n\r\n    // 滚动缓冲\r\n    this.scrollMat();\r\n\r\n    if (typeof this.props.loadHandler === 'function') {\r\n      if (this.scrollBottleneck <= (-this.state.transform.distance)) {\r\n        this.props.loadHandler();\r\n        this.loadAnm();\r\n      }\r\n    }\r\n  }\r\n\r\n  // transitionEndHandler = () => {\r\n  //   this.scrolling = false;\r\n  // }\r\n\r\n  componentDidMount() {\r\n    this.eventControl = new EventControl(this.refScrollWarp!);\r\n    this.eventControl.createEventList(this.onStartHandler, this.onMoveHandler, this.onEndHandler);\r\n    this.eventControl.listenerAllOfEle();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.eventControl!.removeAllOfEle();\r\n  }\r\n  \r\n  render() {\r\n    return <div\r\n      className={this.freshBoxClassName}\r\n      // onTransitionEnd={this.transitionEndHandler}\r\n      ref={ele => this.refScrollWarp = ele}>\r\n        {/* 滚动区域 */}\r\n        <div\r\n          className=\"zui-scroll-area\"\r\n          ref={ele => this.refScrollBody = ele}\r\n          style={{\r\n            transform: `translate(0, ${this.state.transform.distance}px)`,\r\n            transition: `transform ${this.state.transform.time}s ease-out`\r\n          }}\r\n        >\r\n          {/* 刷新tip */}\r\n          <div className=\"zui-scroll-tip\">{this.state.scrollTip}</div>\r\n          {/* 真正的内容 */}\r\n          <div className=\"zui-scroll\">\r\n            {this.props.children}\r\n          </div>\r\n        </div>\r\n        {\r\n          this.state.isLoading ?\r\n            <MarbleLoading className=\"zui-load-tip\"></MarbleLoading>\r\n            : null\r\n        }\r\n      </div>\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport Scroll from '../../../views/Scroll'\r\n\r\nfunction TestContent(props) {\r\n    return Array(props.num).fill(0).map((val, idx) => {\r\n        return <div className=\"test-content\" key={idx}>{idx + 1}：需用手机模式测试</div>\r\n    })\r\n}\r\n\r\nfunction TestReFresh() {\r\n\r\n    const [num, setNum] = useState(50);\r\n\r\n    const freshHandler = () => {\r\n        console.log('刷新')\r\n        setNum(50)\r\n    }\r\n\r\n    const loadHandler = () => {\r\n        console.log('加载')\r\n        setNum(num + 30);\r\n    }\r\n\r\n    return <Scroll\r\n        className=\"test-fresh\"\r\n        freshHandler={freshHandler}\r\n        loadHandler={loadHandler}>\r\n        <TestContent num={num}></TestContent>\r\n    </Scroll>\r\n}\r\n\r\nexport default TestReFresh;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import { passiveSupported } from \"../utils/base\";\r\n\r\nclass EventControl {\r\n    \r\n    eventList: {[key: string]: Function};\r\n    willPreventDefault: object | boolean;\r\n    willNotPreventDefault: object | boolean;\r\n    $ele: HTMLDivElement;\r\n\r\n    constructor(ele: HTMLDivElement) {\r\n        this.eventList = {};\r\n        const isPassiveSupported = passiveSupported();\r\n        this.willPreventDefault = isPassiveSupported ? { passive: false, capture: false } : false;\r\n        this.willNotPreventDefault = isPassiveSupported ? { passive: true } : false;\r\n        this.$ele = ele;\r\n    }\r\n\r\n    createEventList(start: Function, move: Function, end: Function) {\r\n        if ('ontouchstart' in window) {\r\n            this.eventList =  {\r\n                touchstart: start,\r\n                touchmove: move,\r\n                touchend: end,\r\n            }\r\n        } else {\r\n            this.eventList =  {\r\n                mousedown: start,\r\n                mousemove: move,\r\n                mouseup: end,\r\n            }\r\n        }\r\n    }\r\n\r\n    listenerAllOfEle() {\r\n        Object.keys(this.eventList).forEach(key => {\r\n            const pd = key.indexOf('move') >= 0 ? this.willPreventDefault : this.willNotPreventDefault;\r\n            this.$ele.addEventListener(key, this.eventList[key] as any, pd as any);\r\n        })\r\n    }\r\n\r\n    removeAllOfEle() {\r\n        Object.keys(this.eventList).forEach(key => {\r\n            this.$ele.removeEventListener(key, this.eventList[key] as any);\r\n        })\r\n    }\r\n}\r\n\r\nexport default EventControl;\r\n","import { getEventPoint } from \"../utils/base\";\r\n\r\ntype Point = {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\ntype Direction = 'x' | 'y';\r\n\r\ntype UseEvent = React.TouchEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement>;\r\n\r\ninterface MoveControlProps {\r\n    direction?: Direction\r\n}\r\n\r\nconst zeroPoint = JSON.stringify({ x: 0, y: 0 });\r\n\r\nclass MoveControl {\r\n\r\n    startPoint: Point;\r\n    distance: Point;\r\n    endPoint: Point;\r\n    direction: Direction;\r\n    Prevent_Distance: number;\r\n    lockDirection: Direction | null;\r\n    isAnm: boolean;\r\n\r\n    constructor({direction = 'x'}: MoveControlProps) {\r\n        this.direction = direction;\r\n        this.startPoint = JSON.parse(zeroPoint);\r\n        this.distance = JSON.parse(zeroPoint);\r\n        this.endPoint = JSON.parse(zeroPoint);\r\n        this.Prevent_Distance = 5;\r\n        this.lockDirection = null;\r\n        this.isAnm = false;\r\n    }\r\n\r\n    // 终止时位置调整\r\n    _getFinalEndPonit(): Point {\r\n        throw Error('_getFinalEndPonit 需要被重写');\r\n    }\r\n\r\n    // 起点重置项\r\n    _resetSomething() {\r\n        // 需要时重写\r\n        this.distance[this.direction] = 0;\r\n    }\r\n\r\n    // 方向锁定\r\n    _getLockDirection(): Direction | null {\r\n        const absX = Math.abs(this.distance.x);\r\n        const absY = Math.abs(this.distance.y);\r\n\r\n        let lockDirection: Direction | null = null;\r\n\r\n        if (this.direction === 'x') {\r\n            if (absX >= absY && absX > this.Prevent_Distance) {\r\n                lockDirection = 'x';\r\n            } else if (absY > this.Prevent_Distance) {\r\n                lockDirection = 'y';\r\n            }\r\n        } else {\r\n            if (absY >= absX && absY > this.Prevent_Distance) {\r\n                lockDirection = 'y';\r\n            } else if (absX > this.Prevent_Distance) {\r\n                lockDirection = 'x';\r\n            }\r\n        }\r\n        \r\n        return lockDirection;\r\n    }\r\n\r\n    // 移动过程中的移动距离 = 最后停留点 - 触摸点移动距离\r\n    getMoveDist() {\r\n        const dist = this.endPoint[this.direction] - this.distance[this.direction];\r\n        return dist;\r\n    }\r\n\r\n    start(event: UseEvent): void {\r\n        this.isAnm = true;\r\n        const point = getEventPoint(event);\r\n        this.lockDirection = null;\r\n        this.startPoint = {\r\n            x: point.pageX,\r\n            y: point.pageY\r\n        }\r\n        this._resetSomething();\r\n    }\r\n\r\n    // 移动时：获取移动距离\r\n    move(event: UseEvent): Point {\r\n        if (this.isAnm) {\r\n            const point = getEventPoint(event);\r\n            this.distance = {\r\n                x: this.startPoint.x - point.pageX,\r\n                y: this.startPoint.y - point.pageY,\r\n            }\r\n            if (!this.lockDirection) {\r\n                this.lockDirection = this._getLockDirection();\r\n                if (this.direction === 'y' && event.preventDefault) {\r\n                    event.preventDefault();\r\n                } \r\n            } else if (this.direction === this.lockDirection) {\r\n                event.preventDefault && event.preventDefault();\r\n                return Object.assign({x: 0, y: 0}, {[this.direction]: this.getMoveDist()})\r\n            }\r\n        }\r\n        // 如果return movePoint 那么位置不变\r\n        return this.endPoint;\r\n    }\r\n\r\n    end(): Point {\r\n        this.isAnm = false;\r\n        return this._getFinalEndPonit();\r\n    }\r\n\r\n}\r\n\r\nexport default MoveControl;\r\n"],"sourceRoot":""}